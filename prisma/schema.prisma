generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id
  username String @unique
  description String?
  avatar String?
  cover String?
  name String?
  surname String?
  city String?
  school String?
  work String?
  createdAt DateTime? @default(now())
  posts Post[]
  comments Comment[]
  likes Like[]
  follower Follower[] @relation("UserFollower")
  followings Follower[] @relation("UserFollowing")
  followRequestsSend FollowRequest[] @relation("FollowRequestsSend")
  followRequestsReceived FollowRequest[] @relation("FollowRequestsReceived")
  blocks Block[] @relation("BlocksSend")
  blocked Block[] @relation("BlocksReceived")
  stories Story[]
}

model Post {
  id Int @id @default(autoincrement())
  img String?
  desc String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  comments Comment[]
  likes Like[]
}

model Comment {
  id Int @id @default(autoincrement())
  desc String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  likes Like[]
}

model Like {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int?
  comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
}

model Follower {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  follower User @relation("UserFollower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String
}

model FollowRequest {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  sender User @relation("FollowRequestsSend", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String
  receiver User @relation("FollowRequestsReceived", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String

  @@unique([senderId, receiverId])
}

model Block {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  blocker User @relation("BlocksSend", fields: [blockerId], references: [id], onDelete: Cascade)
  blockerId String
  blocked User @relation("BlocksReceived", fields: [blockedId], references: [id], onDelete: Cascade)
  blockedId String

  @@unique([blockerId, blockedId])
}

model Story {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  expiresAt DateTime
  img String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique
}
